#include <stdio.h>
#include <time.h>

// Function to find the maximum of two numbers
int max(int x, int y) {
    return (x > y) ? x : y;
}

// Function to solve the knapsack problem using dynamic programming
void knap(int n, int w[], int value[], int m, int v[][m+1]) {
	int i,j;
    for ( i = 0; i <= n; i++) {
        for ( j = 0; j <= m; j++) {
            if (i == 0 || j == 0)
                v[i][j] = 0;
            else if (w[i-1] <= j)
                v[i][j] = max(v[i-1][j], value[i-1] + v[i-1][j-w[i-1]]);
            else
                v[i][j] = v[i-1][j];
        }
    }
}

int main() {
    int n,i,j, m;
    printf("Enter the capacity of the basket: ");
    scanf("%d", &m);

    printf("Enter the number of items: ");
    scanf("%d", &n);

    int w[n], value[n];
    printf("Enter the weights of %d items:\n", n);
    for ( i = 0; i < n; i++) {
        scanf("%d", &w[i]);
    }

    printf("Enter the value of %d items:\n", n);
    for ( i = 0; i < n; i++) {
        scanf("%d", &value[i]);
    }

    int v[n+1][m+1];
    clock_t starttime = clock();
    knap(n, w, value, m, v);
    clock_t endtime = clock();

    double clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("Optimal solution for the knapsack problem is %d\n", v[n][m]);
    printf("Time taken: %f seconds\n", clk);

    printf("\nThe table for solving knapsack problem using dynamic programming is:\n");
    for ( i = 0; i <= n; i++) {
        for ( j = 0; j <= m; j++) {
            printf("%d\t", v[i][j]);
        }
        printf("\n");
    }

    return 0;
}
